{"version":3,"sources":["constants/ActionTypes.js","constants/URL.js","constants/AzureServices.js","constants/AzureRegions.js","actions/azure.js","components/AzureComponent.js","actions/datadog.js","components/DatadogComponent.js","router/Navigator.js","App.js","serviceWorker.js","reducers/azureReducer.js","reducers/datadogReducer.js","reducers/index.js","index.js"],"names":["ActionTypes","AZURE_OK","AZURE_FAIL","AZURE_INCIDENTS","DATADOG_OK","DATADOG_FAIL","DATADOG_INCIDENTS","URL","CORS_PROXY","AZURE_RSS","DATADOG_RSS","AzureServices","VIRTUAL_MACHINES","CLOUD_SERVICES","AZURE_FUNCTIONS","AzureRegions","EAST_US","EAST_US_2","NORTH_EU","fetchAzure_OK","type","fetchAzure_FAIL","fetchAzure_INCIDENTS","errorService","AzureComponent","props","state","errors","this","fetchAzureStatus","interval","setInterval","reload","clearInterval","prevProps","length","setState","service","region","find","error","style","color","services","regions","data","map","i","dataElement","key","checkStatus","columns","title","dataIndex","concat","span","dataSource","Component","connect","azure","dispatch","RSSParser","parseURL","err","feed","items","Object","values","filter","item","includes","forEach","errorServices","errorRegions","regEx","RegExp","regEx2","match","errSer","errReg","fetchDatadog_OK","fetchDatadog_FAIL","fetchDatadog_INCIDENTS","DatadogComponent","fetchDatadogStatus","window","location","incidents","textAlign","inc","Item","dot","fontSize","paddingLeft","moment","date","format","toUpperCase","dangerouslySetInnerHTML","__html","content","datadog","slice","incident","pubDate","console","log","Navigator","mode","to","path","App","className","Boolean","hostname","initialState","action","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bf392df.chunk.js","sourcesContent":["const ActionTypes = {\n  // Azure\n  AZURE_OK: 'AZURE_OK',\n  AZURE_FAIL: 'AZURE_FAIL',\n  AZURE_INCIDENTS: 'AZURE_INCIDENTS',\n\n  // Datadog\n  DATADOG_OK: 'DATADOG_OK',\n  DATADOG_FAIL: 'DATADOG_FAIL',\n  DATADOG_INCIDENTS: 'DATADOG_INCIDENTS'\n}\n\nexport default ActionTypes","const URL = {\n  CORS_PROXY: 'https://cors-anywhere.herokuapp.com/',\n  AZURE_RSS: 'https://azurestatuscdn.azureedge.net/en-us/status/feed/',\n  DATADOG_RSS: 'https://status.datadoghq.com/history.rss'\n}\n\nexport default URL","const AzureServices = {\n  VIRTUAL_MACHINES: 'Virtual Machines',\n  CLOUD_SERVICES: 'Cloud Services',\n  AZURE_FUNCTIONS: 'Azure Functions'\n}\n\nexport default AzureServices","const AzureRegions = {\n  EAST_US: 'East US',\n  EAST_US_2: 'East US 2',\n  NORTH_EU: 'North Europe'\n}\n\nexport default AzureRegions","import RSSParser from 'rss-parser'\nimport { ActionTypes, URL, AzureServices, AzureRegions } from '../constants'\n\nexport const fetchAzure_OK = () => ({\n  type: ActionTypes.AZURE_OK\n})\n\nexport const fetchAzure_FAIL = () => ({\n  type: ActionTypes.AZURE_FAIL\n})\n\nexport const fetchAzure_INCIDENTS = (errorService) => ({\n  type: ActionTypes.AZURE_INCIDENTS,\n  errorService\n})\n\nexport function fetchAzureStatus() {\n  return (dispatch) => {\n    let parser = new RSSParser()\n\n    parser.parseURL(URL.CORS_PROXY + URL.AZURE_RSS, (err, feed) => {\n      if (err) {\n\n        dispatch(fetchAzure_FAIL())\n        throw err\n\n      } else {\n\n        if (feed.items.length === 0) {\n          dispatch(fetchAzure_OK())\n        } else {\n\n          const services = Object.values(AzureServices)\n          const regions = Object.values(AzureRegions)\n\n          let errors = feed.items.filter(item => {\n            return services.find(service => item.title.includes(service))\n          })\n\n          errors = errors.filter(item => {\n            return regions.find(region => item.title.includes(region))\n          })\n\n          errors.forEach(error => {\n            const errorServices = services.filter(service => {\n              return error.title.includes(service)\n            })\n\n            const errorRegions = regions.filter(region => {\n              const regEx = new RegExp('\\\\b' + region + '( \\\\D)')\n              const regEx2 = new RegExp('\\\\b' + region + '$')\n\n              return error.title.match(regEx) || error.title.match(regEx2)\n            })\n\n            errorServices.forEach(errSer => {\n              errorRegions.forEach(errReg => {\n                return dispatch(fetchAzure_INCIDENTS({\n                  service: errSer,\n                  region: errReg\n                }))\n              })\n            })\n          })\n        }\n      }\n    })\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAzureStatus } from '../actions/azure';\nimport { Table, Icon, Row, Col } from 'antd'\n\nclass AzureComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      errors: this.props.errors\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchAzureStatus()\n\n    this.interval = setInterval(() => this.reload(), 600000)\n  }\n\n  reload() {\n    this.props.fetchAzureStatus()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.errors.length !== prevProps.errors.length) {\n      this.setState({ errors: this.props.errors})\n    }\n  }\n\n  checkStatus(service, region) {\n    const { errors } = this.state\n    return errors.find((error) =>\n      error.service === service && error.region === region)\n      ? <Icon type=\"close-circle\" style={{color: 'red'}}/>\n      : <Icon type=\"check-circle\" style={{color: 'green'}} />\n  }\n\n  render() {\n    const { services, regions } = this.props\n\n    const data = services.map((service, i) => {\n      let dataElement = {\n        key: i,\n        service,\n      }\n\n      regions.map((region, i) => (\n        dataElement = {...dataElement, [region]: this.checkStatus(service, region)}\n      ))\n      return dataElement\n    })\n\n    let columns = [\n      {\n        title: '',\n        dataIndex: 'service'\n      }\n    ]\n\n    columns = columns.concat(regions.map(region => ({\n      title: region,\n      dataIndex: region,\n    })))\n\n    return (\n      <div>\n        <h1>AZURE STATUS</h1>\n        <Row>\n          <Col span={3}></Col>\n          <Col span={18}>\n            <Table columns={columns} dataSource={data} />\n          </Col>\n          <Col span={3}></Col>\n        </Row>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  fetchAzureStatus: () => {\n    dispatch(fetchAzureStatus());\n  }\n});\n\nconst mapStateToProps = state => ({\n  services: state.azure.services,\n  regions: state.azure.regions,\n  errors: state.azure.errors\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AzureComponent);\n","import RSSParser from 'rss-parser'\nimport { URL, ActionTypes } from '../constants'\n\nexport const fetchDatadog_OK = () => ({\n  type: ActionTypes.DATADOG_OK\n})\n\nexport const fetchDatadog_FAIL = () => ({\n  type: ActionTypes.DATADOG_FAIL\n})\n\nexport const fetchDatadog_INCIDENTS = (errorService) => ({\n  type: ActionTypes.DATADOG_INCIDENTS,\n  errorService\n})\n\nexport function fetchDatadogStatus() {\n  return (dispatch) => {\n    let parser = new RSSParser()\n\n    parser.parseURL(URL.CORS_PROXY + URL.DATADOG_RSS, (err, feed) => {\n      if (err) {\n        dispatch(fetchDatadog_FAIL())\n        throw err\n      } else {\n          dispatch(fetchDatadog_OK())\n\n          const incidents = feed.items.slice(0, 5)\n\n          incidents.forEach(incident => {\n            dispatch(fetchDatadog_INCIDENTS({\n              title: incident.title,\n              content: incident.content,\n              date: incident.pubDate\n            }))\n          })\n          console.log(incidents)\n        }\n      \n    })\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchDatadogStatus } from '../actions/datadog';\nimport { Timeline, Row, Col, Icon } from 'antd';\nimport * as moment from 'moment';\n\nclass DatadogComponent extends Component {\n\n  componentDidMount() {\n    this.props.fetchDatadogStatus()\n\n    this.interval = setInterval(() => this.reload(), 600000)\n  }\n\n  reload() {\n    window.location.reload()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>DATADOG INCIDENTS</h1>\n        <Row>\n          <Col span={7}></Col>\n          <Col span={10}>\n            <div >\n              { this.props.incidents.length === 0\n                ? <p>Loading...</p>\n                : <Timeline style={{textAlign: 'left'}}>\n                    { this.props.incidents.map((inc, i) => (\n                      <Timeline.Item key={i} dot={<Icon type=\"clock-circle-o\" style={{ fontSize: '1.4em' }} />}>\n                        <div style={{paddingLeft: '.5em'}}>\n                          <div style={{fontSize: '1.3em'}}>\n                            <h4> {moment(inc.date).format('YYYY-MM-DD')} {inc.title.toUpperCase()}</h4>\n                          </div>\n                          <div dangerouslySetInnerHTML={{ __html: inc.content}}/>\n                        </div>\n                      </Timeline.Item>\n                    ))}\n                </Timeline>\n              }\n            </div>\n          </Col>\n          <Col span={7}></Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchDatadogStatus: () => {\n    dispatch(fetchDatadogStatus());\n  }\n});\n\nconst mapStateToProps = state => ({\n  incidents: state.datadog.incidents\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatadogComponent);\n\n","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport AzureComponent from '../components/AzureComponent';\nimport DatadogComponent from '../components/DatadogComponent';\nimport { Menu } from 'antd'\n\nclass Navigator extends Component {\n  render() {\n    return (\n      <Router>\n        <Menu mode='horizontal'>\n          <Menu.Item><Link to=\"/azure\">AZURE</Link></Menu.Item>\n          <Menu.Item><Link to=\"/datadog\">DATADOG</Link></Menu.Item>\n        </Menu>\n          <Switch>\n            <Route path=\"/azure\">\n              <AzureComponent />\n            </Route>\n            <Route path=\"/datadog\">\n              <DatadogComponent />\n            </Route>\n          </Switch>\n        \n      </Router>\n    );\n  }\n}\n\nexport default Navigator;","import React from 'react';\nimport './App.css';\nimport Navigator from './router/Navigator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionTypes, AzureRegions, AzureServices } from '../constants'\n\nexport const initialState = {\n  services: Object.values(AzureServices),\n  regions: Object.values(AzureRegions),\n  errors: []\n}\n\nexport default function azure (state = initialState, action) {\n  switch (action.type) {\n\n    case ActionTypes.AZURE_OK:\n      return {\n        ...initialState,\n      }\n\n    case ActionTypes.AZURE_FAIL:\n      return {\n        ...state\n      }\n\n    case ActionTypes.AZURE_INCIDENTS:\n      \n      return {\n        ...state,\n        errors: [...state.errors, action.errorService]    \n      }\n\n    default: \n      return state\n  }\n}","import { ActionTypes } from \"../constants\"\n\nexport const initialState = {\n  incidents: []\n}\n\nexport default function datadog (state = initialState, action) {\n  switch (action.type) {\n\n    case ActionTypes.DATADOG_OK:\n      return {\n        ...initialState\n      }\n    \n    case ActionTypes.DATADOG_FAIL:\n      return {\n        ...state\n      }\n\n    case ActionTypes.DATADOG_INCIDENTS:\n      return {\n        ...state,\n        incidents: [...state.incidents, action.errorService]\n      }\n\n    default: \n      return state\n  }\n}","import { combineReducers } from 'redux';\nimport azure from './azureReducer'\nimport datadog from './datadogReducer'\n\nconst rootReducer = () => (\n  combineReducers({\n      azure,\n      datadog\n  })\n);\n\nexport default rootReducer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n  rootReducer(),\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}